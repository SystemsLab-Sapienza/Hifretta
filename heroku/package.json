{
  "name": "xmlrpc",
  "description": "A pure JavaScript XML-RPC client and server.",
  "keywords": [
    "xml-rpc",
    "xmlrpc",
    "xml",
    "rpc"
  ],
  "version": "1.3.1",
  "preferGlobal": false,
  "homepage": "https://github.com/baalexander/node-xmlrpc",
  "author": {
    "name": "Brandon Alexander",
    "email": "baalexander@gmail.com",
    "url": "https://github.com/baalexander"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/baalexander/node-xmlrpc.git"
  },
  "bugs": {
    "url": "https://github.com/baalexander/node-xmlrpc/issues"
  },
  "directories": {
    "lib": "./lib"
  },
  "main": "./lib/xmlrpc.js",
  "dependencies": {
    "sax": "0.6.x",
    "xmlbuilder": "2.6.x"
  },
  "devDependencies": {
    "vows": "0.7.x"
  },
  "scripts": {
    "test": "make test"
  },
  "engines": {
    "node": ">=0.8",
    "npm": ">=1.0.0"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/baalexander/node-xmlrpc/raw/master/LICENSE"
    }
  ],
  "readme": "## The What\n\nThe xmlrpc module is a pure JavaScript XML-RPC server and client for node.js.\n\nPure JavaScript means that the [XML parsing](https://github.com/isaacs/sax-js)\nand [XML building](https://github.com/robrighter/node-xml) use pure JavaScript\nlibraries, so no extra C dependencies or build requirements. The xmlrpc module\ncan be used as an XML-RPC server, receiving method calls and responding with\nmethod responses, or as an XML-RPC client, making method calls and receiving\nmethod responses, or as both.\n\n\n## The How\n\n### To Install\n\n```bash\nnpm install xmlrpc\n```\n\n### To Use\n\nThe file client_server.js in the example directory has a nicely commented\nexample of using xmlrpc as an XML-RPC server and client (they even talk to each\nother!).\n\nA brief example:\n\n```javascript\nvar xmlrpc = require('xmlrpc')\n\n// Creates an XML-RPC server to listen to XML-RPC method calls\nvar server = xmlrpc.createServer({ host: 'localhost', port: 9090 })\n// Handle methods not found\nserver.on('NotFound', function(method, params) {\n  console.log('Method ' + method + ' does not exist');\n})\n// Handle method calls by listening for events with the method call name\nserver.on('anAction', function (err, params, callback) {\n  console.log('Method call params for \\'anAction\\': ' + params)\n\n  // ...perform an action...\n\n  // Send a method response with a value\n  callback(null, 'aResult')\n})\nconsole.log('XML-RPC server listening on port 9091')\n\n// Waits briefly to give the XML-RPC server time to start up and start\n// listening\nsetTimeout(function () {\n  // Creates an XML-RPC client. Passes the host information on where to\n  // make the XML-RPC calls.\n  var client = xmlrpc.createClient({ host: 'localhost', port: 9090, path: '/'})\n\n  // Sends a method call to the XML-RPC server\n  client.methodCall('anAction', ['aParam'], function (error, value) {\n    // Results of the method response\n    console.log('Method response for \\'anAction\\': ' + value)\n  })\n\n}, 1000)\n```\n\nOutput from the example:\n\n```\nXML-RPC server listening on port 9090\nMethod call params for 'anAction': aParam\nMethod response for 'anAction': aResult\n```\n\n### Date/Time Formatting\n\nXML-RPC dates are formatted according to ISO 8601. There are a number of\nformatting options within the boundaries of the standard. The decoder detects\nthose formats and parses them automatically, but for encoding dates to ISO\n8601 some options can be specified to match your specific implementation.\n\n\nThe formatting options can be set through\n```xmlrpc.dateFormatter.setOpts(options);```, where the ```options```\nparameter is an object, with the following (optional) boolean members:\n\n* ```colons``` - enables/disables formatting the time portion with a colon as\nseparator (default: ```true```)\n* ```hyphens``` - enables/disables formatting the date portion with a hyphen\nas separator (default: ```false```)\n* ```local``` - encode as local time instead of UTC (```true``` = local,\n```false``` = utc, default: ```true```)\n* ```ms``` - enables/disables output of milliseconds (default: ```false```)\n* ```offset``` - enables/disables output of UTC offset in case of local time\n(default: ```false```)\n\n\nDefault format: 20140101T11:20:00\n\n\nUTC Example:\n```javascript\nxmlrpc.dateFormatter.setOpts({\n  colons: true\n, hyphens: true\n, local: false\n, ms: true\n}) // encoding output: '2014-01-01T16:20:00.000Z'\n```\n\nLocal date + offset example:\n```javascript\nxmlrpc.dateFormatter.setOpts({\n  colons: true\n, hyphens: true\n, local: true\n, ms: false\n, offset: true\n}) // encoding output: '2014-01-01T11:20:00-05:00'\n```\n\n### Cookies support\n\nIt is possible to turn on cookies support for XML-RPC client by special options\nflag. If turned on then all the cookies received from server will be bounced\nback with subsequent calls to the server. You also may manipulate cookies\nmanually by the setCookie/getCookie call.\n\n```javascript\nvar client = xmlrpc.createClient({\n  host: 'localhost',\n  port: 9090,\n  cookies: true\n});\n\nclient.setCookie('login', 'bilbo');\n\n//This call will send provided cookie to the server\nclient.methodCall('someAction', [], function(error, value) {\n  //Here we may get cookie received from server if we know its name\n  console.log(client.getCookie('session'));\n});\n\n```\n\n### Custom Types\nIf you need to parse to a specific format or need to handle custom data types\nthat are not supported by default, it is possible to extend the serializer\nwith a user-defined type for your specific needs.\n\nA custom type can be defined as follows:\n```javascript\nvar xmlrpc = require('xmlrpc');\nvar util = require('util');\n\n// create your custom class\nvar YourType = function (raw) {\n  xmlrpc.CustomType.call(this, raw);\n};\n\n// inherit everything\nutil.inherits(YourType, xmlrpc.CustomType);\n\n// set a custom tagName (defaults to 'customType')\nYourType.prototype.tagName = 'yourType';\n\n// optionally, override the serializer\nYourType.prototype.serialize = function (xml) {\n  var value = somefunction(this.raw);\n  return xml.ele(this.tagName).txt(value);\n}\n```\n\nand then make your method calls, wrapping your variables inside your new type\ndefinition:\n\n```javascript\nvar client = xmlrpc.createClient('YOUR_ENDPOINT');\nclient.methodCall('YOUR_METHOD', [new YourType(yourVariable)], yourCallback);\n```\n\n### To Debug (client-side)\n\nError callbacks on the client are enriched with request and response\ninformation and the returned body as long as a http connection was made,\nto aide with request debugging. Example:\n\n```javascript\nvar client = xmlrpc.createClient({ host: 'example.com', port: 80 });\nclient.methodCall('FAULTY_METHOD', [], function (error, value) {\n  if (error) {\n    console.log('error:', error);\n    console.log('req headers:', error.req && error.req._header);\n    console.log('res code:', error.res && error.res.statusCode);\n    console.log('res body:', error.body);\n  } else {\n    console.log('value:', value);\n  }\n});\n\n// error: [Error: Unknown XML-RPC tag 'TITLE']\n// req headers: POST / HTTP/1.1\n// User-Agent: NodeJS XML-RPC Client\n// ...\n// res code: 200\n// res body: <!doctype html>\n// ...\n```\n\n### To Test\n\n[![Build\nStatus](https://secure.travis-ci.org/baalexander/node-xmlrpc.png)](http://travis-ci.org/baalexander/node-xmlrpc)\n\nXML-RPC must be precise so there are an extensive set of test cases in the test\ndirectory. [Vows](http://vowsjs.org/) is the testing framework and [Travis\nCI](http://travis-ci.org/baalexander/node-xmlrpc) is used for Continuous\nIntegration.\n\nTo run the test suite:\n\n`make test`\n\nIf submitting a bug fix, please update the appropriate test file too.\n\n\n## The License (MIT)\n\nReleased under the MIT license. See the LICENSE file for the complete wording.\n\n\n## Contributors\n\nThank you to all [the\nauthors](https://github.com/baalexander/node-xmlrpc/graphs/contributors) and\neveryone who has filed an issue to help make xmlrpc better.\n\n",
  "readmeFilename": "README.md",
  "_id": "xmlrpc@1.3.1",
  "dist": {
    "shasum": "4fec30d21373e42d08894b28c35e891d53fe0047"
  },
  "_from": "xmlrpc@",
  "_resolved": "https://registry.npmjs.org/xmlrpc/-/xmlrpc-1.3.1.tgz"
}
